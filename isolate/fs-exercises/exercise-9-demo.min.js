const _0x4115 = ['write', '6.a', '5.a', 'a\x20file\x20name\x20is\x20required,\x20exiting', 'now', 'reading\x20filenames\x20...', '1.b', 'declaring\x20appendFileCallback', 'append', 'writing\x20to\x20', '3.a', 'log', 'exit', '1.a', 'command:\x20', '\x0aCOMMANDS:\x0a\x0a\x20\x20list\x0a\x20\x20\x20\x20logs\x20all\x20of\x20the\x20file\x20names\x20in\x20the\x20current\x20directory\x0a\x0a\x20\x20write\x20<fileName>\x20<text>\x0a\x20\x20\x20\x20writes\x20the\x20<text>\x20the\x20file\x20with\x20<fileName>\x0a\x0a\x20\x20append\x20<fileName>\x20<text>\x0a\x20\x20\x20\x20appends\x20the\x20<text>\x20the\x20file\x20with\x20<fileName>\x0a\x0aFLAGS:\x0a\x0a\x20\x20-h\x0a\x20\x20\x20\x20print\x20this\x20helpful\x20message\x0a', '2.b', '6.b', '\x20...', '\x20ms.\x20\x0a', 'list', 'a\x20command\x20is\x20required,\x20exiting', 'appending\x20to\x20', 'success!\x20\x20appended\x20to\x20', '\x0alog\x20', 'argv', '4.b', 'writeFile', 'includes', 'error', 'success!\x20\x20wrote\x20to\x20', 'fileName:\x20', '2.a', '4.a', 'appendFile']; (function (_0x48ec65, _0x4115b4) { const _0x2fd401 = function (_0x388090) { while (--_0x388090) { _0x48ec65['push'](_0x48ec65['shift']()); } }; _0x2fd401(++_0x4115b4); }(_0x4115, 0x196)); const _0x2fd4 = function (_0x48ec65, _0x4115b4) { _0x48ec65 = _0x48ec65 - 0x0; let _0x2fd401 = _0x4115[_0x48ec65]; return _0x2fd401; }; const _0x457af0 = require('fs'); const _0x46ab52 = Date[_0x2fd4('0x12')](); const _0x107e14 = _0x2fd4('0x1d'); const _0x370794 = (_0x11aacf, _0x365894) => console[_0x2fd4('0x19')](_0x2fd4('0x3') + _0x11aacf + ',\x20' + (Date['now']() - _0x46ab52) + _0x2fd4('0x21'), _0x365894); if (process[_0x2fd4('0x4')][_0x2fd4('0x7')]('-h')) { _0x370794(0x0, _0x107e14); process[_0x2fd4('0x1a')](0x0); } const _0x2ba7fd = process[_0x2fd4('0x4')][0x2]; const _0x2530e4 = process[_0x2fd4('0x4')][0x3]; const _0xa159f1 = process[_0x2fd4('0x4')][0x4]; if (_0x2ba7fd === undefined) { _0x370794(_0x2fd4('0x1b'), _0x2fd4('0x0')); process[_0x2fd4('0x1a')](0x0); } else { _0x370794(_0x2fd4('0x14'), _0x2fd4('0x1c') + _0x2ba7fd); }; if (_0x2ba7fd === _0x2fd4('0x22')) { _0x370794('3', _0x2fd4('0x13')); const _0x59cd7c = _0x457af0['readdirSync'](__dirname); _0x370794('4', _0x59cd7c); process[_0x2fd4('0x1a')](0x0); }; if (_0x2530e4 === undefined) { _0x370794(_0x2fd4('0xb'), _0x2fd4('0x11')); process[_0x2fd4('0x1a')](0x0); } else { _0x370794(_0x2fd4('0x1e'), _0x2fd4('0xa') + _0x2530e4); }; if (_0xa159f1 === undefined) { _0x370794(_0x2fd4('0x18'), 'text\x20is\x20required,\x20exiting'); process[_0x2fd4('0x1a')](0x0); } else { _0x370794('3.b', 'text:\x20' + _0xa159f1); }; if (_0x2ba7fd === _0x2fd4('0xe')) { _0x370794(_0x2fd4('0xc'), 'declaring\x20writeFileCallback'); const _0x5b31ef = _0x303639 => { if (_0x303639) { console[_0x2fd4('0x8')](_0x303639); } else { _0x370794(_0x2fd4('0xf'), _0x2fd4('0x9') + _0x2530e4); } }; _0x457af0[_0x2fd4('0x6')](__dirname + '/' + _0x2530e4, _0xa159f1, _0x5b31ef); _0x370794(_0x2fd4('0x10'), _0x2fd4('0x17') + _0x2530e4 + _0x2fd4('0x20')); } else if (_0x2ba7fd === _0x2fd4('0x16')) { _0x370794(_0x2fd4('0x5'), _0x2fd4('0x15')); const _0x278efc = _0x36c8fe => { if (_0x36c8fe) { console[_0x2fd4('0x8')](_0x36c8fe); } else { _0x370794(_0x2fd4('0x1f'), _0x2fd4('0x2') + _0x2530e4); } }; _0x457af0[_0x2fd4('0xd')](__dirname + '/' + _0x2530e4, _0xa159f1, _0x278efc); _0x370794('5.b', _0x2fd4('0x1') + _0x2530e4 + _0x2fd4('0x20')); } else { _0x370794('4.c', 'unknown\x20command:\x20' + _0x2ba7fd); }
